---
import type {ImageMetadata} from 'astro';
import {getCollection, type CollectionEntry} from 'astro:content';
import {Image} from 'astro:assets';

import Default from '@/layouts/Default.astro';
import FormattedDate from '@/components/FormattedDate.astro';
import Select from '@/components/Select.astro';

type BlogPost = CollectionEntry<'blog'>;

interface Props {
  title: string;
  description: string;
  image?: ImageMetadata;
  filteredPosts?: BlogPost[];
  selectedTag?: string;
}
const {title, description, image, filteredPosts, selectedTag} = Astro.props;

const allPosts = (await getCollection('blog')).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf(),
);
const tags = [...new Set(allPosts.map((post) => post.data.tags).flat())].sort(
  (a, b) => a.localeCompare(b),
);
const postsToRender = filteredPosts ?? allPosts;
const selectItems = tags.map((tag) => ({
  label: tag,
  url: `/blog/tags/${tag}/`,
}));
const defaultItem = {label: 'â€”', url: '/blog/'};
---

<Default title={title} description={description} image={image}>
  <section class='blog'>
    <h1>{title}</h1>
    <div class='posts-details'>
      <div class='posts-count'>
        Showing {postsToRender.length} of {allPosts.length}
        {allPosts.length === 1 ? 'post' : 'posts'}
      </div>
      <Select
        items={selectItems}
        selectedItem={selectedTag}
        defaultItem={defaultItem}
        label='Filter by tag'
      />
    </div>
    <div class='posts-list'>
      {
        postsToRender.map((post: BlogPost) => {
          const {image, alt} = post.data.imageData;
          return (
            <article class='post'>
              <a class='post-link' href={`/blog/${post.id}/`}>
                <Image
                  class='post-image'
                  src={image}
                  alt={`Post cover: ${alt}`}
                />
                <div class='post-details'>
                  <h2 class='post-heading'>{post.data.title}</h2>
                  <FormattedDate date={post.data.date} />
                  <ul class='tags'>
                    {post.data.tags
                      .sort((a, b) => a.localeCompare(b))
                      .map((tag) => (
                        <li class='tag'>
                          <span>{tag}</span>
                        </li>
                      ))}
                  </ul>
                </div>
              </a>
            </article>
          );
        })
      }
    </div>
  </section>
</Default>

<style>
  .posts-details {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    margin: 2rem 0;
  }

  .posts-count {
    margin: 0;
    line-height: 1;
    font-family: var(--font-family-sans-serif-condensed);
    font-size: var(--font-size-medium);
  }

  .posts-list {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    margin: 2rem 0;
  }

  .post:first-child {
    flex-basis: 100%;
  }

  .post {
    position: relative;
    flex-basis: calc(50% - 1rem);
  }

  .post-link {
    text-decoration: none;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .post-image {
    aspect-ratio: 16 / 9;
  }

  .post-details {
    font-family: var(--font-family-sans-serif-condensed);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    font-family: var(--font-family-sans-serif-condensed);
    font-size: var(--font-size-medium);
    font-weight: bold;
    color: var(--color-white);
    list-style: none;
    padding: 0;
    margin: 0.4rem;
    gap: 0.4rem;
    row-gap: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  .tag {
    background-color: var(--color-primary);
    display: block;
    padding: 0.1rem 0.4rem;
  }

  .post-heading {
    margin: 0;
    font-size: var(--font-size-heading-3);
  }

  @media only screen and (max-width: 500px) {
    .posts-list {
      flex-direction: column;
    }

    .post {
      flex-basis: 100%;
    }
  }
</style>
